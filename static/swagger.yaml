openapi: 3.0.0
info:
  title: lab 2 API  by Dupliak Stepan variant â„–8
  description: >-
    Optional multiline or single-line description in
    [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

servers:
  - url: '/'
tags:
  - name: user
    description: "user details"
  - name: booking
    description: "booking details"
  - name: buy 
    description: "sellers details"
paths:
  /user:
    get:
      tags: 
      - user
      summary: Returns all user
      description: Returns current user.
      responses:
        '200':
          description: a JSON of ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: No users exist
          content:
            text/plain:
              schema:
                title: No users exist
                type: string
                example: No users exist
      
                
 
    post:
      tags: 
      - user
      summary: login.
      description: login.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                  username:
                    type: string
                  password:
                    type: string
      responses:
        '200':
          description: OK user switched
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: user not found
                type: string
            
          
    put:   
      tags: 
      - user
      summary: create user.
      description: create user by json 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: ctreate sucssesful
        '404':
          description: This user already exist
          content:
            text/plain:
              schema:
                title: This user already exist
                type: string
                example: This user already exist
         
    
          
          
  /user/{user_id}:
    get:
      tags: 
      - user
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      responses:
        '200':
          description: a JSON of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: user not found
                type: string
                example: Not found
    delete:
      tags: 
      - user
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '200':
          description: delete sucssesful
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: user not found
                type: string
                example: incorect id or user not exist
  /book:
    get:
      tags: 
      - booking
      summary: return current user booking ticket.
      description: return current user booking ticket
      responses:
        '200':
          description: return booking transaction with type "book"
          content:
            application/json:
              schema:
                example: 
                  transaction_id: 1
                  user_id: 2
                  ticket_id: 32
                  type: book
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Booking not found
                type: string
                example: booking not exist        
         
        
    post:
      tags: 
      - booking
      summary: new book ticket registered
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/ticket'
      responses:
        '200':
          description: return booking transaction with type "book"
          content:
            application/json:
              schema:
                example: 
                  transaction_id: 1
                  user_id: 2
                  ticket_id: 32
                  type: book
        '404':
          description: Not found ticket
          content:
            text/plain:
              schema:
                title: Booking not found
                type: string
                example: this ticket already sold 
  /book/{ticket_id}:
    get:
      tags: 
      - booking
      parameters:
        - in: path
          name: ticket_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      description: return current user booking ticket
      responses:
        '200':
          description: return booking transaction with type "book" by "ticket_id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Booking not found
                type: string
                example: booking not exist  
  /decline_book: 
    post:
      tags: 
      - booking
      summary: Decline book 
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ticket_id:
                  type: integer
      responses:
        '200':
          description: Decline book 
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Booking not found
                type: string
                example: booking not exist    
  /buy:
    get:
      tags: 
      - buy
      summary: return current user bought ticket.
      description: return current user bought ticket
      responses:
        '200':
          description: return current user bought ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: tickets not found
                type: string
                example: tickets not found  
    post:
      tags: 
      - buy
      summary: buy ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket'
      responses:
        '200':
          description: buy ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: tickets already sold
                type: string
                example: tickets already sold 
                
  /buy/{ticket_id}:
    get:
      tags: 
      - buy
      parameters:
        - in: path
          name: ticket_id
          schema:
            type: integer
          required: true
          description: ticket sold by id
      description: return current user buy ticket
      responses:
        '200':
          description: return current user bought ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: tickets not found
                type: string
                example: tickets not found    
    
            
components:
  schemas:
    user:
      properties:
        user_id:
          type: integer
        username:
          type: string
        password:
          type: string
 
    ticket:
      properties:
        ticket_id:
          type: integer
        price:
          type: integer
        place:
          type: integer
        title:
          type: string
        date:
          type: integer
 
    transaction:
      properties:
        transaction_id:
          type: integer
        user_id:
          type: integer
        ticket_id:
          type: integer
        type:
          type: string
          
    
        
